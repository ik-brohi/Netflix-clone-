"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _FirebaseStorage_instances, _FirebaseStorage_directoryPath, _FirebaseStorage_bucket, _FirebaseStorage_namePrefix, _FirebaseStorage_nameSuffix, _FirebaseStorage_firebase, _FirebaseStorage_unique, _FirebaseStorage_appName, _FirebaseStorage_public, _FirebaseStorage_mimeMap, _FirebaseStorage_hooks, _FirebaseStorage_required, _FirebaseStorage_callHook, _FirebaseStorage_getMimetype, _FirebaseStorage_getFileName, _FirebaseStorage_validateCredentials;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AvailableHooks = void 0;
/* eslint-disable @typescript-eslint/no-non-null-assertion */
const firebase_admin_1 = __importDefault(require("firebase-admin"));
var AvailableHooks;
(function (AvailableHooks) {
    AvailableHooks["beforeUpload"] = "beforeUpload";
    AvailableHooks["afterUpload"] = "afterUpload";
    AvailableHooks["beforeDelete"] = "beforeDelete";
    AvailableHooks["afterDelete"] = "afterDelete";
    AvailableHooks["beforeInit"] = "beforeInit";
    AvailableHooks["afterInit"] = "afterInit";
})(AvailableHooks = exports.AvailableHooks || (exports.AvailableHooks = {}));
class FirebaseStorage {
    /**
     * @param {MulterFirebaseOptions} opts Configuration Options
    **/
    constructor(opts, firebaseClient) {
        _FirebaseStorage_instances.add(this);
        _FirebaseStorage_directoryPath.set(this, '');
        _FirebaseStorage_bucket.set(this, '');
        _FirebaseStorage_namePrefix.set(this, '');
        _FirebaseStorage_nameSuffix.set(this, '');
        _FirebaseStorage_firebase.set(this, null);
        _FirebaseStorage_unique.set(this, false);
        _FirebaseStorage_appName.set(this, '');
        _FirebaseStorage_public.set(this, false);
        _FirebaseStorage_mimeMap.set(this, {});
        _FirebaseStorage_hooks.set(this, {});
        _FirebaseStorage_required.set(this, (message) => { throw new Error(message); });
        __classPrivateFieldSet(this, _FirebaseStorage_directoryPath, opts.directoryPath || '', "f");
        __classPrivateFieldSet(this, _FirebaseStorage_namePrefix, opts.namePrefix || '', "f");
        __classPrivateFieldSet(this, _FirebaseStorage_nameSuffix, opts.nameSuffix || '', "f");
        __classPrivateFieldSet(this, _FirebaseStorage_mimeMap, opts.mimeMap || {}, "f");
        __classPrivateFieldSet(this, _FirebaseStorage_public, opts.public || false, "f");
        __classPrivateFieldSet(this, _FirebaseStorage_unique, opts.unique || false, "f");
        __classPrivateFieldSet(this, _FirebaseStorage_hooks, opts.hooks || {}, "f");
        __classPrivateFieldSet(this, _FirebaseStorage_bucket, opts.bucketName || __classPrivateFieldGet(this, _FirebaseStorage_required, "f").call(this, 'Bucket Name Required'), "f");
        __classPrivateFieldSet(this, _FirebaseStorage_appName, opts.appName ? opts.appName : `multer-firebase-${__classPrivateFieldGet(this, _FirebaseStorage_bucket, "f")}-${Date.now().toString(16)}`, "f");
        __classPrivateFieldSet(this, _FirebaseStorage_firebase, firebaseClient, "f");
        __classPrivateFieldGet(this, _FirebaseStorage_instances, "m", _FirebaseStorage_callHook).call(this, 'beforeInit', this);
        if (!firebaseClient) {
            __classPrivateFieldGet(this, _FirebaseStorage_instances, "m", _FirebaseStorage_validateCredentials).call(this, opts.credentials);
            __classPrivateFieldSet(this, _FirebaseStorage_firebase, firebase_admin_1.default.initializeApp({
                credential: firebase_admin_1.default.credential.cert(opts.credentials),
                storageBucket: __classPrivateFieldGet(this, _FirebaseStorage_bucket, "f")
            }, __classPrivateFieldGet(this, _FirebaseStorage_appName, "f")), "f");
        }
        __classPrivateFieldGet(this, _FirebaseStorage_instances, "m", _FirebaseStorage_callHook).call(this, 'afterInit', this, __classPrivateFieldGet(this, _FirebaseStorage_firebase, "f"));
    }
    /**
     * @private
    **/
    _handleFile(req, file, cb) {
        __classPrivateFieldGet(this, _FirebaseStorage_instances, "m", _FirebaseStorage_callHook).call(this, 'beforeUpload', req, file);
        const fileName = __classPrivateFieldGet(this, _FirebaseStorage_instances, "m", _FirebaseStorage_getFileName).call(this, file);
        const bucketFile = __classPrivateFieldGet(this, _FirebaseStorage_firebase, "f").storage().bucket().file(fileName);
        const outStream = bucketFile.createWriteStream({
            metadata: {
                contentType: __classPrivateFieldGet(this, _FirebaseStorage_instances, "m", _FirebaseStorage_getMimetype).call(this, file)
            }
        });
        file.stream.pipe(outStream);
        outStream.on('error', (err) => {
            cb(err);
        });
        outStream.on('finish', () => {
            const returnObject = {
                fileRef: bucketFile,
                path: fileName,
                bucket: __classPrivateFieldGet(this, _FirebaseStorage_bucket, "f"),
                bucketRef: __classPrivateFieldGet(this, _FirebaseStorage_firebase, "f").storage().bucket(__classPrivateFieldGet(this, _FirebaseStorage_bucket, "f")),
                isPublic: __classPrivateFieldGet(this, _FirebaseStorage_public, "f"),
            };
            if (__classPrivateFieldGet(this, _FirebaseStorage_public, "f")) {
                bucketFile.makePublic();
                returnObject.publicUrl = bucketFile.publicUrl();
            }
            __classPrivateFieldGet(this, _FirebaseStorage_instances, "m", _FirebaseStorage_callHook).call(this, 'afterUpload', req, file, returnObject.fileRef, returnObject.bucketRef);
            cb(null, returnObject);
        });
    }
    /**
     * @private
    **/
    _removeFile(req, file, cb) {
        __classPrivateFieldGet(this, _FirebaseStorage_instances, "m", _FirebaseStorage_callHook).call(this, 'beforeDelete', req, file);
        const fileRef = __classPrivateFieldGet(this, _FirebaseStorage_firebase, "f").storage().bucket().file(__classPrivateFieldGet(this, _FirebaseStorage_instances, "m", _FirebaseStorage_getFileName).call(this, file));
        fileRef.delete({ ignoreNotFound: true }, (err, data) => {
            __classPrivateFieldGet(this, _FirebaseStorage_instances, "m", _FirebaseStorage_callHook).call(this, 'afterDelete', req, file, fileRef, __classPrivateFieldGet(this, _FirebaseStorage_firebase, "f").storage().bucket(__classPrivateFieldGet(this, _FirebaseStorage_bucket, "f")));
            cb(err, data);
        });
    }
}
_FirebaseStorage_directoryPath = new WeakMap(), _FirebaseStorage_bucket = new WeakMap(), _FirebaseStorage_namePrefix = new WeakMap(), _FirebaseStorage_nameSuffix = new WeakMap(), _FirebaseStorage_firebase = new WeakMap(), _FirebaseStorage_unique = new WeakMap(), _FirebaseStorage_appName = new WeakMap(), _FirebaseStorage_public = new WeakMap(), _FirebaseStorage_mimeMap = new WeakMap(), _FirebaseStorage_hooks = new WeakMap(), _FirebaseStorage_required = new WeakMap(), _FirebaseStorage_instances = new WeakSet(), _FirebaseStorage_callHook = function _FirebaseStorage_callHook(hookName, ...params) {
    const hookToBeCalled = __classPrivateFieldGet(this, _FirebaseStorage_hooks, "f")[hookName];
    if (hookToBeCalled) {
        return hookToBeCalled.call(this, ...params);
    }
}, _FirebaseStorage_getMimetype = function _FirebaseStorage_getMimetype(file) {
    const mime = __classPrivateFieldGet(this, _FirebaseStorage_mimeMap, "f")[file.originalname.split('.')[0]] || __classPrivateFieldGet(this, _FirebaseStorage_mimeMap, "f")['*'] || file.mimetype;
    return mime;
}, _FirebaseStorage_getFileName = function _FirebaseStorage_getFileName(file) {
    return `${__classPrivateFieldGet(this, _FirebaseStorage_directoryPath, "f") ? __classPrivateFieldGet(this, _FirebaseStorage_directoryPath, "f") + '/' : ''}${__classPrivateFieldGet(this, _FirebaseStorage_namePrefix, "f")}${file.originalname.split('.')[0]}${__classPrivateFieldGet(this, _FirebaseStorage_nameSuffix, "f")}${__classPrivateFieldGet(this, _FirebaseStorage_unique, "f") ? Date.now().toString(16) : ''}.${file.originalname.split('.')[1] || ''}`;
}, _FirebaseStorage_validateCredentials = function _FirebaseStorage_validateCredentials(credentials) {
    if (!credentials)
        return __classPrivateFieldGet(this, _FirebaseStorage_required, "f").call(this, 'Credentials Required');
    if (!['string', 'object'].includes(typeof credentials))
        return __classPrivateFieldGet(this, _FirebaseStorage_required, "f").call(this, 'Credentials must be a string or service account object');
    if (typeof credentials === 'object' &&
        !credentials.projectId || !credentials.privateKey || !credentials.clientEmail)
        return __classPrivateFieldGet(this, _FirebaseStorage_required, "f").call(this, 'Credentials must be a string or service account object');
    return credentials;
};
/**
 * The firebase storage engine for multer
*/
function default_1(opts, firebaseClient = null) {
    return new FirebaseStorage(opts, firebaseClient);
}
exports.default = default_1;
module.exports = (opts, firebaseClient = null) => new FirebaseStorage(opts, firebaseClient);
//# sourceMappingURL=index.js.map